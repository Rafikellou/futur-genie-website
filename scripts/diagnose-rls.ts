import { createClient } from '@supabase/supabase-js';

// Variables d'environnement (√† remplir manuellement ou via process.env)
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes');
  console.error('NEXT_PUBLIC_SUPABASE_URL:', !!supabaseUrl);
  console.error('SUPABASE_SERVICE_ROLE_KEY:', !!supabaseServiceKey);
  process.exit(1);
}

// Cr√©er un client avec la cl√© service (bypass RLS)
const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function diagnoseRLS() {
  console.log('üîç DIAGNOSTIC RLS - CR√âATION DE CLASSE\n');
  console.log('='.repeat(60));

  // 1. V√©rifier les donn√©es de l'utilisateur
  console.log('\nüìä 1. DONN√âES DE L\'UTILISATEUR director26@gmaiml.com\n');
  
  const { data: user, error: userError } = await supabase
    .from('users')
    .select('*')
    .eq('email', 'director26@gmaiml.com')
    .single();

  if (userError) {
    console.error('‚ùå Erreur r√©cup√©ration utilisateur:', userError);
  } else if (!user) {
    console.error('‚ùå Utilisateur non trouv√©');
  } else {
    console.log('‚úÖ Utilisateur trouv√©:');
    console.log('   ID:', user.id);
    console.log('   Email:', user.email);
    console.log('   Full Name:', user.full_name);
    console.log('   Role:', user.role);
    console.log('   School ID:', user.school_id || '‚ùå NULL');
    console.log('   Classroom ID:', user.classroom_id || 'NULL');
  }

  // 2. V√©rifier l'√©cole associ√©e
  if (user?.school_id) {
    console.log('\nüè´ 2. √âCOLE ASSOCI√âE\n');
    
    const { data: school, error: schoolError } = await supabase
      .from('schools')
      .select('*')
      .eq('id', user.school_id)
      .single();

    if (schoolError) {
      console.error('‚ùå Erreur r√©cup√©ration √©cole:', schoolError);
    } else if (!school) {
      console.error('‚ùå √âcole non trouv√©e (school_id existe mais √©cole absente)');
    } else {
      console.log('‚úÖ √âcole trouv√©e:');
      console.log('   ID:', school.id);
      console.log('   Name:', school.name);
      console.log('   Created:', new Date(school.created_at).toLocaleString());
    }
  } else {
    console.log('\nüè´ 2. √âCOLE ASSOCI√âE\n');
    console.log('‚ùå Pas de school_id assign√©');
  }

  // 3. V√©rifier les politiques RLS sur classrooms
  console.log('\nüîê 3. POLITIQUES RLS SUR LA TABLE CLASSROOMS\n');
  
  const { data: policies, error: policiesError } = await supabase
    .rpc('get_policies_for_table', { table_name: 'classrooms' })
    .catch(() => ({ data: null, error: { message: 'Fonction RPC non disponible' } }));

  if (policiesError || !policies) {
    console.log('‚ö†Ô∏è Impossible de r√©cup√©rer les politiques via RPC');
    console.log('   Utilisez le SQL Editor dans Supabase Dashboard pour v√©rifier:');
    console.log('   SELECT * FROM pg_policies WHERE tablename = \'classrooms\';');
  } else {
    console.log('‚úÖ Politiques trouv√©es:');
    policies.forEach((policy: any) => {
      console.log(`\n   - ${policy.policyname}`);
      console.log(`     Commande: ${policy.cmd}`);
      console.log(`     USING: ${policy.qual || 'NULL'}`);
      console.log(`     WITH CHECK: ${policy.with_check || 'NULL'}`);
    });
  }

  // 4. Simuler la v√©rification RLS
  console.log('\nüß™ 4. SIMULATION DE LA POLITIQUE RLS\n');
  
  if (user?.school_id && user?.role === 'DIRECTOR') {
    console.log('‚úÖ Conditions de base remplies:');
    console.log('   - Role = DIRECTOR ‚úÖ');
    console.log('   - School ID existe ‚úÖ');
    console.log('\n   La politique RLS devrait normalement PASSER');
    console.log('   si elle est correctement configur√©e dans Supabase.');
  } else {
    console.log('‚ùå Conditions de base NON remplies:');
    if (user?.role !== 'DIRECTOR') {
      console.log('   - Role ‚â† DIRECTOR ‚ùå');
    }
    if (!user?.school_id) {
      console.log('   - School ID manquant ‚ùå');
    }
  }

  // 5. Tester l'insertion (avec service role, donc bypass RLS)
  console.log('\nüß™ 5. TEST D\'INSERTION (avec service role key)\n');
  
  if (user?.school_id) {
    const testClassroom = {
      name: 'TEST DIAGNOSTIC - √Ä SUPPRIMER',
      grade: 'CP' as const,
      school_id: user.school_id
    };

    console.log('Tentative d\'insertion:', testClassroom);

    const { data: insertedClassroom, error: insertError } = await supabase
      .from('classrooms')
      .insert([testClassroom])
      .select()
      .single();

    if (insertError) {
      console.error('\n‚ùå Erreur d\'insertion (m√™me avec service role):', insertError);
      console.error('   Code:', insertError.code);
      console.error('   Message:', insertError.message);
    } else {
      console.log('\n‚úÖ Insertion r√©ussie avec service role key:');
      console.log('   ID:', insertedClassroom.id);
      console.log('   Name:', insertedClassroom.name);
      
      // Supprimer la classe de test
      const { error: deleteError } = await supabase
        .from('classrooms')
        .delete()
        .eq('id', insertedClassroom.id);

      if (deleteError) {
        console.error('\n‚ö†Ô∏è Erreur suppression classe de test:', deleteError);
        console.log('   Veuillez supprimer manuellement la classe:', insertedClassroom.id);
      } else {
        console.log('   ‚úÖ Classe de test supprim√©e');
      }
    }
  } else {
    console.log('‚è≠Ô∏è Test ignor√© (pas de school_id)');
  }

  // 6. V√©rifier les classes existantes
  console.log('\nüìö 6. CLASSES EXISTANTES POUR CETTE √âCOLE\n');
  
  if (user?.school_id) {
    const { data: classrooms, error: classroomsError } = await supabase
      .from('classrooms')
      .select('*')
      .eq('school_id', user.school_id);

    if (classroomsError) {
      console.error('‚ùå Erreur r√©cup√©ration classes:', classroomsError);
    } else if (!classrooms || classrooms.length === 0) {
      console.log('‚ÑπÔ∏è Aucune classe existante');
    } else {
      console.log(`‚úÖ ${classrooms.length} classe(s) trouv√©e(s):`);
      classrooms.forEach((classroom: any) => {
        console.log(`   - ${classroom.name} (${classroom.grade})`);
      });
    }
  } else {
    console.log('‚è≠Ô∏è V√©rification ignor√©e (pas de school_id)');
  }

  // 7. Recommandations
  console.log('\nüí° 7. RECOMMANDATIONS\n');
  
  if (!user) {
    console.log('‚ùå L\'utilisateur n\'existe pas dans public.users');
    console.log('   ‚Üí Cr√©er l\'utilisateur ou v√©rifier l\'email');
  } else if (!user.school_id) {
    console.log('‚ùå L\'utilisateur n\'a pas de school_id');
    console.log('   ‚Üí Compl√©ter l\'onboarding sur /onboarding/school');
  } else if (user.role !== 'DIRECTOR') {
    console.log('‚ùå L\'utilisateur n\'est pas DIRECTOR');
    console.log('   ‚Üí V√©rifier le r√¥le dans la base de donn√©es');
  } else {
    console.log('‚úÖ Les donn√©es utilisateur sont correctes');
    console.log('\n   Le probl√®me vient probablement des politiques RLS:');
    console.log('   1. V√©rifiez dans Supabase Dashboard ‚Üí Database ‚Üí Policies');
    console.log('   2. Cherchez la table "classrooms"');
    console.log('   3. V√©rifiez la politique "Directors can create classrooms"');
    console.log('   4. Elle doit utiliser WITH CHECK (pas USING)');
    console.log('   5. Elle ne doit pas d√©pendre de fonctions manquantes');
    console.log('\n   Script SQL de correction disponible dans:');
    console.log('   ‚Üí supabase-rls-policies.sql (lignes 75-99)');
  }

  console.log('\n' + '='.repeat(60));
  console.log('‚úÖ DIAGNOSTIC TERMIN√â\n');
}

// Ex√©cuter le diagnostic
diagnoseRLS().catch(console.error);
