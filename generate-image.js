const { GoogleGenerativeAI } = require('@google/generative-ai');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

class ImageGenerator {
    constructor() {
        if (!process.env.GEMINI_API_KEY) {
            throw new Error('GEMINI_API_KEY non trouv√©e dans le fichier .env');
        }
        
        this.genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
        this.model = this.genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
    }

    /**
     * G√©n√®re une description d'image pour une section du site Futur G√©nie
     * @param {string} sectionName - Nom de la section (ex: "hero", "probleme", "solution")
     * @param {string} context - Contexte sp√©cifique de la section
     * @param {string} style - Style souhait√© (ex: "illustration", "mockup", "icone")
     * @returns {Promise<string>} Description de l'image g√©n√©r√©e
     */
    async generateImageDescription(sectionName, context = '', style = 'illustration') {
        const prompt = `
G√©n√®re une description d√©taill√©e d'image pour la section "${sectionName}" d'un site web √©ducatif appel√© "Futur G√©nie".

Contexte de la plateforme:
- Plateforme √©ducative pour √©coles primaires et coll√®ges
- Cible: directeurs d'√©cole, enseignants, parents
- Couleurs principales: bleu nuit (#0E1A3A), violet (#6C63FF), orange (#FF6B35)
- Style moderne, professionnel mais accessible

Section: ${sectionName}
Contexte sp√©cifique: ${context}
Style souhait√©: ${style}

G√©n√®re une description d'image en fran√ßais qui:
1. Respecte l'identit√© visuelle (couleurs bleu nuit, violet, orange)
2. Soit adapt√©e au public √©ducatif
3. Transmette professionnalisme et innovation
4. Soit r√©alisable en illustration vectorielle ou photo
5. √âvite les √©l√©ments trop enfantins ou trop corporate

Format de r√©ponse: Description claire et d√©taill√©e en 2-3 phrases maximum.
`;

        try {
            const result = await this.model.generateContent(prompt);
            const response = await result.response;
            return response.text().trim();
        } catch (error) {
            console.error('Erreur lors de la g√©n√©ration:', error);
            throw error;
        }
    }

    /**
     * G√©n√®re et sauvegarde une description d'image dans un fichier
     * @param {string} sectionName - Nom de la section
     * @param {string} context - Contexte sp√©cifique
     * @param {string} style - Style souhait√©
     * @param {string} outputDir - Dossier de sortie (d√©faut: ./image-descriptions)
     */
    async generateAndSave(sectionName, context = '', style = 'illustration', outputDir = './image-descriptions') {
        try {
            console.log(`üé® G√©n√©ration d'une description d'image pour la section "${sectionName}"...`);
            
            const description = await this.generateImageDescription(sectionName, context, style);
            
            // Cr√©er le dossier s'il n'existe pas
            if (!fs.existsSync(outputDir)) {
                fs.mkdirSync(outputDir, { recursive: true });
            }
            
            // Nom du fichier avec timestamp
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            const filename = `${sectionName}-${timestamp}.txt`;
            const filepath = path.join(outputDir, filename);
            
            // Sauvegarder la description
            const content = `Section: ${sectionName}
Contexte: ${context}
Style: ${style}
G√©n√©r√© le: ${new Date().toLocaleString('fr-FR')}

Description:
${description}
`;
            
            fs.writeFileSync(filepath, content, 'utf8');
            
            console.log(`‚úÖ Description g√©n√©r√©e et sauvegard√©e dans: ${filepath}`);
            console.log(`üìù Description: ${description}`);
            
            return {
                description,
                filepath,
                filename
            };
            
        } catch (error) {
            console.error('‚ùå Erreur:', error.message);
            throw error;
        }
    }
}

// Fonction utilitaire pour utilisation en ligne de commande
async function main() {
    const args = process.argv.slice(2);
    
    if (args.length === 0) {
        console.log(`
üé® G√©n√©rateur d'images pour Futur G√©nie

Usage:
  node generate-image.js <section> [contexte] [style]

Exemples:
  node generate-image.js hero "Section d'accueil avec CTA" illustration
  node generate-image.js probleme "Difficult√©s des enseignants" mockup
  node generate-image.js solution "Plateforme √©ducative" icone

Sections sugg√©r√©es:
  - hero, probleme, solution, avantages, preuve-sociale
  - fonctionnalites, tarification, disponibilite, faq, cta-final
        `);
        return;
    }
    
    const [sectionName, context = '', style = 'illustration'] = args;
    
    try {
        const generator = new ImageGenerator();
        await generator.generateAndSave(sectionName, context, style);
    } catch (error) {
        console.error('‚ùå Erreur lors de l\'ex√©cution:', error.message);
        process.exit(1);
    }
}

// Ex√©cuter si appel√© directement
if (require.main === module) {
    main();
}

module.exports = ImageGenerator;
